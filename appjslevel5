cookies and session and concept using passport and express sessions// incorporating todo list on local server using mongodb database using ongoose

require('dotenv').config();
const express=require("express");
const app=express();
const mongoose=require("mongoose");

const https=require("https");//api
const  session = require('express-session');
const passport=require("passport");
const passportLocalMongoose=require("passport-local-mongoose");
const bodyParser=require("body-parser");
app.use(bodyParser.urlencoded({extended:true}));//to use body parser
// const date=require(__dirname+"/module.js");//this will go in that module and run all the code inside it
const _=require("lodash");
app.set('view engine', 'ejs');//for ejs to work
app.use(express.static("public"));//this will let other static files like css and images all to render
//alwyas place these codes in same order
//initialisation of cookie session


app.use(session({          //javascript object
  secret: 'This will be placed in env file ,it is encryption style',//secret is key here
  resave: false,
  saveUninitialized: true

}));
//now we initialize passport and use it to set our sessions
app.use(passport.initialize());//initialise passport
app.use(passport.session());//creting session using passport



mongoose.connect("mongodb://localhost:27017/secretsDB") ;//toDoDB is the name of database when connecting locally





const secretSchema=new mongoose.Schema(
  {
    username:String,
    pass:String
  }
);
secretSchema.plugin(passportLocalMongoose);//hash and salt our password and to save user to mongo db database


const Secret=mongoose.model("Secret",secretSchema);
// CHANGE: USE "createStrategy" INSTEAD OF "authenticate"
passport.use(Secret.createStrategy());//creating local strategy

//locla serializeser and deserialiser
passport.serializeUser(Secret.serializeUser());//create cookie of that session
passport.deserializeUser(Secret.deserializeUser());//allwos passport use that cookie to authenticate

app.get("/",function(req,res)
{
  res.render("home");
});


app.get("/login",function(req,res)
{
  res.render("login");
});

app.get("/register",function(req,res)
{
  res.render("register");
});


/////inn earlier method we did not make this as this
//should be reachable only when called login so herer before showing secrets we will tell
//passport.login authenticate to check if authenticated then render else do not render
//it will check from seesion details whether we are logged in or not


app.get("/secrets",function(req,res)//restricted page restricted only to users
{
    if(req.isAuthenticated())//cheks from cookie that any cookie for this user aut exist or not
    {
      res.render("secrets");
    }
    else{
      res.redirect("/login");
    }
});

app.get("/logout",function(req,res)
{
  req.logout();//function from passport destryos cookie as well
  res.redirect("/");
});


app.post("/register",function(req,res)
{
  Secret.register({username:req.body.username},req.body.password,function(err,secret)
{
  if(err)
  {
    console.log(err);
    res.redirect("/register");

  }
  else{
    passport.authenticate("local")(req,res,function()//authenticate creates a cookie and when redirected to secret that cookie
    //is deserailise and used against is authenticated function to see whether authenticated or not
  {
    //here entered means is authenticated
    res.redirect("/secrets");
  });


  }
});




});

app.post("/login",function(req,res)
{
  const nuser=new Secret({
    username:req.body.username,
    pass:req.body.password
  });
  req.login(nuser,function(err)//funv=ction from paasport to check creditials from database
{
  if(err)
  {
    console.log(err);
    res.redirect("/login");
  }
  else{
    passport.authenticate("local")(req,res,function()
  {
    //yaha tk aaya mtlb authenticate hua shi h aur wo cookie bna __dirname
    res.redirect("/secrets");
  });
  }
});

});
app
app.listen(process.env.PORT|| 3000,function()
{
  console.log("server working");
});
